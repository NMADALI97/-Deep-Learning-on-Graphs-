# -*- coding: utf-8 -*-
"""Graph Mining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1awAD_8ORyTvFhCChU2GSdHVLZVEe6k8j
"""

!pip install networkx

"""
Graph Mining - ALTEGRAD - Dec 2019
"""

import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

############## Task 1

##################
G = nx.read_edgelist('CA-HepTh.txt', comments='#', delimiter='\t', create_using=nx.Graph())
print( "Nodes :"+str(len(G.nodes())))
print( "Edges :" +str( len(G.edges()) ) )
#  #
##################

############## Task 2

##################
connected_components=[list(cc) for cc in  nx.weakly_connected_components(G)]
print( "Largest Connected  Component Size:" +  str(len(max(nx.weakly_connected_components(G), key=len))))
giant_connected_component=max(nx.weakly_connected_components(G), key=len)

GCC =G.subgraph(giant_connected_component)

print( "Nodes :"+str(len(GCC.nodes())))
print( "Edges :" +str( len(GCC.edges()) ) )

print( "Fraction Of The Whole Graph :" +str( len(GCC.nodes())/len(G.nodes())  ) )



#  #
##################

############## Task 3
# Degree

##################
degree_sequence=[G.degree(node) for node in G.nodes()]
print("Minimum Degree : " +str(min(degree_sequence)))
print("Maximum  Degree : " +str(max(degree_sequence)))
print("Mean  Degree : " +str(np.mean(degree_sequence)))
#  #
##################

############## Task 4

##################

hist = nx.degree_histogram(G)
plt.plot(hist)
plt.title("Degree distribution")
plt.xlabel("Degree")
plt.ylabel("Frequency")
plt.show()

plt.plot(hist)
plt.xscale('log', basex=10)
plt.yscale('log', basey=10)
plt.title("Degree distribution")
plt.xlabel("log Degree")
plt.ylabel("log Frequency")
plt.show()


#  #
##################